<div class=" row camera">
    <div class="camera_block row">
        <div class="col-md-6 pic container">
            <a href="/camera/0">
            <h4 class="cam_name" onload="">Cam 1</h4></a>
            
            <video muted id="video"width="100%" height="300" id="videos" controls autoplay ></video>
            <span id="vid"></span>
        </div>
        <div class="col-md-6 pic container" >
            <a href="/camera/1">
            <h4 class="cam_name">Cam 2</h4></a>
            <video muted width="100%" id="videos" controls autoplay src="http://localhost:3017/videos"> </video>
        </div>
    </div>
    <div class="camera_block row">
        <div class="col-md-6 pic container">
            <a href="/camera/2">
            <h4 class="cam_name">Cam 3</h4></a>
            <video muted id="videos" width="100%" controls autoplay src="http://localhost:3017/videos1"> </video>
        </div>
        <div class="col-md-6 pic container">
            <a href="/camera/3">
            <h4 class="cam_name">Cam 4</h4></a>
            <video muted id="videos" width="100%" controls autoplay src="http://localhost:3017/videos2"> </video>
        </div>
    </div>
</div>


 <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
        <script
            src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script>
let video = document.querySelector("#video");

$(document).ready( async function()  {
    let stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
	video.srcObject = stream;
});
        
            // More API functions here:
            // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image
            // the link to your model provided by Teachable Machine export panel
            const URL = "https://teachablemachine.withgoogle.com/models/8UcEEBcDB/";
            let model, webcam, labelContainer, maxPredictions;
            // Load the image model and setup the webcam
            async function init() {
                const modelURL = URL + "model.json";
                const metadataURL = URL + "metadata.json";
                // load the model and metadata
                // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                // or files from your local hard drive
                // Note: the pose library adds "tmImage" object to your window (window.tmImage)
                model = await tmImage.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();
                // Convenience function to setup a webcam
                const flip = true; // whether to flip the webcam
                webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
                await webcam.setup(); // request access to the webcam
                await webcam.play();
                window.requestAnimationFrame(loop);
                // append elements to the DOM
                document.getElementById("video").appendChild(webcam.canvas);
                labelContainer = document.getElementById("vid");
                for (let i = 0; i < maxPredictions; i++) { // and class labels
                    labelContainer.appendChild(document.createElement("div"));
                }
            }
            async function loop() {
                webcam.update(); // update the webcam frame
                await predict();
                window.requestAnimationFrame(loop);
            }
            // run the webcam image through the image model
            async function predict() {
                // predict can take in an image, video or canvas html element
                const prediction = await model.predict(webcam.canvas);
                for (let i = 0; i < maxPredictions; i++) {
                    const classPrediction =
                        prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                    labelContainer.childNodes[i].innerHTML = classPrediction;
                }
            }
       
</script>