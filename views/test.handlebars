
<div>

</div>
<script>

let video;  // webcam input
let model;  // coco-ssd model


function setup() {
  createCanvas(640, 480);

  // start video as usual
  video = createCapture(VIDEO);
 

  // load the coco-ssd model (this can take
  // quite a while), when done, set our
  // model to the loaded one
  console.log('loading model...');
  cocoSsd.load().then(cocoSsd => {
    console.log('- loaded');
    model = cocoSsd;
  });

  // what's the weird => symbol mean?
  // it's an 'arrow function'!
  // read more about them here:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
}


function draw() {
  image(video, 0,0);

  // if the webcam is working and the model
  // has been loaded, go ahead...
  if (video.width > 0 && model !== undefined) {
    
    // tensorflow.js requires the input to
    // be in a specific format – we grab the
    // all the pixels (from 0,0 to width,height)
    // from 'drawingContext' (our canvas)...
    const imgData = drawingContext.getImageData(0,0, width, height);
    
    // ...and feed that into the model to 
    // find objects in the frame!
    model.detect(imgData).then(predictions => {
      
      // the predictions come back as a list
      for (let p of predictions) {
        
        // includes a bounding box
        // for the object
        let x = p.bbox[0];
        let y = p.bbox[1];
        let w = p.bbox[2];
        let h = p.bbox[3];
        stroke(255);
        noFill();
        rect(x,y, w,h);

        // as well as the name of the object
        // and a score (0–1), telling us the
        // confidence that this is correct
        fill(255);
        noStroke();
        text(p.class + ': ' + nf(p.score, 0,4), x+10,y+15);
      }
    });
  }
}
</script>